module main
{
  type router_id_t = bv4;
  type stage_t = bv3;
  type packet_t = record {
    d1 : integer,
    d2 : integer,
    d3 : integer,
    stage : stage_t
  };

  define valid_router(s : router_id_t) : boolean =
    (s >= 1bv4 && s <= 10bv4);

  define valid_stage(s : stage_t) : boolean =
    (s >= 1bv3 && s <= 3bv3);

  define valid_packet(p : packet_t) : boolean =
    p.d1 != p.d2 && p.d2 != p.d3 && p.d3 != p.d1 && valid_stage(p.stage);

  var packets : [integer]packet_t;
  const num_packets : integer = 4;

  procedure next_location(p : packet_t)
    returns (location : integer)
  {
    case
      (p.stage == 1bv3) : {
        location = p.d1;
      }
      (p.stage == 2bv3) : {
        location = p.d2;
      }
      (p.stage == 3bv3) : {
        location = p.d3;
      }
    esac
  }


  procedure move_packets()
    modifies packets;
                                                                                                                             5,1           Top
 {
    for (i : integer) in range(0, num_packets) {
      if ((packets[i]).stage <= 3bv3) {
        var p : packet_t;
        p = packets[i];
        p.stage = p.stage + 1bv3;
        packets[i] = p;
      }
    }
  }
  procedure check_destn_within_bound()
    modifies packets;
  {
        for(i : integer) in range(0 , num_packets){
                var p : packet_t;
                p = packets[i];
                assume (p.d1 >= 1 && p.d1 <= 10 );
                assume (p.d2 >= 1 && p.d2 <= 10 );
                assume (p.d3 >= 1 && p.d3 <= 10 );
        }

  }

  init {
    call check_destn_within_bound();
    for (i : integer) in range(0, num_packets) {
      var p : packet_t;
      p = packets[i];
      assume valid_packet(packets[i]);
    }
  }
  next {
    call move_packets();
  }
  assume p : true;
  invariant always_false: false;
  control {
    v = unroll(2);
    check;
  print_results;
    v.print_cex(
      (packets[0]).d1, (packets[0]).d2, (packets[0]).d3, (packets[0]).stage,
(packets[1]).d1, (packets[1]).d2, (packets[1]).d3, (packets[1]).stage,
      (packets[2]).d1, (packets[2]).d2, (packets[2]).d3, (packets[2]).stage,
      (packets[3]).d1, (packets[3]).d2, (packets[3]).d3, (packets[3]).stage
    );
  }
}
                                                                                                                             88,1          Bot
